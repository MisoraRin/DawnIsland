package com.yanrou.dawnisland.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.yanrou.dawnisland.database.List2String;
import com.yanrou.dawnisland.json2class.SeriesContentJson;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERIES_CONTENT_JSON".
*/
public class SeriesContentJsonDao extends AbstractDao<SeriesContentJson, Void> {

    public static final String TABLENAME = "SERIES_CONTENT_JSON";

    /**
     * Properties of entity SeriesContentJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Po = new Property(0, String.class, "po", false, "PO");
        public final static Property LastPage = new Property(1, int.class, "lastPage", false, "LAST_PAGE");
        public final static Property LastReplyCount = new Property(2, int.class, "lastReplyCount", false, "LAST_REPLY_COUNT");
        public final static Property Substate = new Property(3, int.class, "substate", false, "SUBSTATE");
        public final static Property ForumId = new Property(4, int.class, "forumId", false, "FORUM_ID");
        public final static Property SeriesId = new Property(5, String.class, "seriesId", false, "SERIES_ID");
        public final static Property Fid = new Property(6, String.class, "fid", false, "FID");
        public final static Property Img = new Property(7, String.class, "img", false, "IMG");
        public final static Property Ext = new Property(8, String.class, "ext", false, "EXT");
        public final static Property Now = new Property(9, String.class, "now", false, "NOW");
        public final static Property Userid = new Property(10, String.class, "userid", false, "USERID");
        public final static Property Name = new Property(11, String.class, "name", false, "NAME");
        public final static Property Email = new Property(12, String.class, "email", false, "EMAIL");
        public final static Property Title = new Property(13, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(14, String.class, "content", false, "CONTENT");
        public final static Property Sage = new Property(15, int.class, "sage", false, "SAGE");
        public final static Property Admin = new Property(16, int.class, "admin", false, "ADMIN");
        public final static Property ReplyCount = new Property(17, int.class, "replyCount", false, "REPLY_COUNT");
    }

    private final List2String poConverter = new List2String();

    public SeriesContentJsonDao(DaoConfig config) {
        super(config);
    }
    
    public SeriesContentJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERIES_CONTENT_JSON\" (" + //
                "\"PO\" TEXT NOT NULL ," + // 0: po
                "\"LAST_PAGE\" INTEGER NOT NULL ," + // 1: lastPage
                "\"LAST_REPLY_COUNT\" INTEGER NOT NULL ," + // 2: lastReplyCount
                "\"SUBSTATE\" INTEGER NOT NULL ," + // 3: substate
                "\"FORUM_ID\" INTEGER NOT NULL ," + // 4: forumId
                "\"SERIES_ID\" TEXT," + // 5: seriesId
                "\"FID\" TEXT," + // 6: fid
                "\"IMG\" TEXT," + // 7: img
                "\"EXT\" TEXT," + // 8: ext
                "\"NOW\" TEXT," + // 9: now
                "\"USERID\" TEXT," + // 10: userid
                "\"NAME\" TEXT," + // 11: name
                "\"EMAIL\" TEXT," + // 12: email
                "\"TITLE\" TEXT," + // 13: title
                "\"CONTENT\" TEXT," + // 14: content
                "\"SAGE\" INTEGER NOT NULL ," + // 15: sage
                "\"ADMIN\" INTEGER NOT NULL ," + // 16: admin
                "\"REPLY_COUNT\" INTEGER NOT NULL );"); // 17: replyCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERIES_CONTENT_JSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SeriesContentJson entity) {
        stmt.clearBindings();
        stmt.bindString(1, poConverter.convertToDatabaseValue(entity.getPo()));
        stmt.bindLong(2, entity.getLastPage());
        stmt.bindLong(3, entity.getLastReplyCount());
        stmt.bindLong(4, entity.getSubstate());
        stmt.bindLong(5, entity.getForumId());
 
        String seriesId = entity.getSeriesId();
        if (seriesId != null) {
            stmt.bindString(6, seriesId);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(7, fid);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(8, img);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(9, ext);
        }
 
        String now = entity.getNow();
        if (now != null) {
            stmt.bindString(10, now);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(11, userid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(14, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(15, content);
        }
        stmt.bindLong(16, entity.getSage());
        stmt.bindLong(17, entity.getAdmin());
        stmt.bindLong(18, entity.getReplyCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SeriesContentJson entity) {
        stmt.clearBindings();
        stmt.bindString(1, poConverter.convertToDatabaseValue(entity.getPo()));
        stmt.bindLong(2, entity.getLastPage());
        stmt.bindLong(3, entity.getLastReplyCount());
        stmt.bindLong(4, entity.getSubstate());
        stmt.bindLong(5, entity.getForumId());
 
        String seriesId = entity.getSeriesId();
        if (seriesId != null) {
            stmt.bindString(6, seriesId);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(7, fid);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(8, img);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(9, ext);
        }
 
        String now = entity.getNow();
        if (now != null) {
            stmt.bindString(10, now);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(11, userid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(14, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(15, content);
        }
        stmt.bindLong(16, entity.getSage());
        stmt.bindLong(17, entity.getAdmin());
        stmt.bindLong(18, entity.getReplyCount());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SeriesContentJson readEntity(Cursor cursor, int offset) {
        SeriesContentJson entity = new SeriesContentJson( //
            poConverter.convertToEntityProperty(cursor.getString(offset + 0)), // po
            cursor.getInt(offset + 1), // lastPage
            cursor.getInt(offset + 2), // lastReplyCount
            cursor.getInt(offset + 3), // substate
            cursor.getInt(offset + 4), // forumId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // seriesId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // img
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ext
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // now
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // email
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // title
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // content
            cursor.getInt(offset + 15), // sage
            cursor.getInt(offset + 16), // admin
            cursor.getInt(offset + 17) // replyCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SeriesContentJson entity, int offset) {
        entity.setPo(poConverter.convertToEntityProperty(cursor.getString(offset + 0)));
        entity.setLastPage(cursor.getInt(offset + 1));
        entity.setLastReplyCount(cursor.getInt(offset + 2));
        entity.setSubstate(cursor.getInt(offset + 3));
        entity.setForumId(cursor.getInt(offset + 4));
        entity.setSeriesId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExt(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNow(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTitle(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setContent(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSage(cursor.getInt(offset + 15));
        entity.setAdmin(cursor.getInt(offset + 16));
        entity.setReplyCount(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SeriesContentJson entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SeriesContentJson entity) {
        return null;
    }

    @Override
    public boolean hasKey(SeriesContentJson entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
